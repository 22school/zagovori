from aiogram import Dispatcher, types
from aiogram.dispatcher.filters import Command
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from datetime import datetime, timedelta

from database.models import User, Subscription
from services.openai_service import OpenAIService

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
FREE_MESSAGES_LIMIT = 10  # –õ–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å

async def get_or_create_user(session: AsyncSession, user: types.User):
    result = await session.execute(
        select(User).where(User.tg_id == user.id)
    )
    db_user = result.scalar_one_or_none()
    
    if db_user is None:
        db_user = User(
            tg_id=user.id,
            username=user.username,
            full_name=user.full_name
        )
        session.add(db_user)
        await session.commit()
    
    return db_user

async def cmd_start(message: types.Message, session: AsyncSession):
    user = await get_or_create_user(session, message.from_user)
    
    welcome_text = (
        f"–°”ô–ª–µ–º, {message.from_user.full_name}! üëã\n\n"
        "–ú–µ–Ω “õ–∞–∑–∞“õ —Ç—ñ–ª—ñ–Ω “Ø–π—Ä–µ–Ω—É–≥–µ –∫”©–º–µ–∫—Ç–µ—Å–µ—Ç—ñ–Ω –±–æ—Ç!\n"
        "–Ø –±–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∫–∞–∑–∞—Ö—Å–∫–æ–≥–æ —è–∑—ã–∫–∞!\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/help - –ü–æ–º–æ—â—å\n"
        "/subscribe - –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"
    )
    
    await message.answer(welcome_text)

async def cmd_help(message: types.Message):
    help_text = (
        "ü§ñ –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:\n\n"
        "1. –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏–ª–∏ –∫–∞–∑–∞—Ö—Å–∫–æ–º\n"
        "2. –Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º\n"
        "3. –ë–µ—Å–ø–ª–∞—Ç–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ 10 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å\n"
        "4. –î–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –∫–æ–º–∞–Ω–¥–æ–π /subscribe\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞\n"
        "/help - –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/subscribe - –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\n"
        "/profile - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ"
    )
    
    await message.answer(help_text)

async def cmd_profile(message: types.Message, session: AsyncSession):
    user = await get_or_create_user(session, message.from_user)
    
    subscription_status = "–ê–∫—Ç–∏–≤–Ω–∞" if user.is_premium else "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    messages_left = FREE_MESSAGES_LIMIT - user.messages_today if not user.is_premium else "‚àû"
    
    profile_text = (
        f"üë§ –ü—Ä–æ—Ñ–∏–ª—å\n\n"
        f"–ò–º—è: {user.full_name}\n"
        f"Username: @{user.username}\n"
        f"–ü–æ–¥–ø–∏—Å–∫–∞: {subscription_status}\n"
        f"–°–æ–æ–±—â–µ–Ω–∏–π –æ—Å—Ç–∞–ª–æ—Å—å —Å–µ–≥–æ–¥–Ω—è: {messages_left}"
    )
    
    await message.answer(profile_text)

async def handle_message(message: types.Message, session: AsyncSession, openai_service: OpenAIService):
    user = await get_or_create_user(session, message.from_user)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if not user.is_premium:
        if user.messages_today >= FREE_MESSAGES_LIMIT:
            return  # Middleware —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ª–∏–º–∏—Ç–µ
        
        user.messages_today += 1
        user.last_message_date = datetime.now()
        await session.commit()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
    await message.answer_chat_action("typing")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ OpenAI
    response = await openai_service.process_message(message.text)
    await message.answer(response)

def register_base_handlers(dp: Dispatcher, session_pool, openai_service: OpenAIService):
    dp.register_message_handler(lambda msg: cmd_start(msg, session_pool()), Command("start"))
    dp.register_message_handler(cmd_help, Command("help"))
    dp.register_message_handler(lambda msg: cmd_profile(msg, session_pool()), Command("profile"))
    dp.register_message_handler(
        lambda msg: handle_message(msg, session_pool(), openai_service)
    ) 