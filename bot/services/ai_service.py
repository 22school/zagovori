import google.generativeai as genai
import logging
from typing import Optional

logger = logging.getLogger(__name__)

class AIService:
    def __init__(self, provider: str, api_key: str):
        self.provider = provider
        self.api_key = api_key
        
        if provider == "google":
            genai.configure(api_key=api_key)
            self.model = genai.GenerativeModel('gemini-pro')
        
        self.system_prompt = """
        –¢—ã - –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∫–∞–∑–∞—Ö—Å–∫–æ–≥–æ —è–∑—ã–∫–∞. –¢–≤–æ–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:
        1. –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º - –ø–µ—Ä–µ–≤–µ–¥–∏ –Ω–∞ –∫–∞–∑–∞—Ö—Å–∫–∏–π –∏ –æ–±—ä—è—Å–Ω–∏ –≥—Ä–∞–º–º–∞—Ç–∏–∫—É
        2. –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –∫–∞–∑–∞—Ö—Å–∫–æ–º - –ø–µ—Ä–µ–≤–µ–¥–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π –∏ –æ–±—ä—è—Å–Ω–∏ –≥—Ä–∞–º–º–∞—Ç–∏–∫—É
        3. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ
        4. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è
        
        –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
        üîÑ –ü–µ—Ä–µ–≤–æ–¥: [–ø–µ—Ä–µ–≤–æ–¥]
        üìù –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: [—Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è]
        üîç –ì—Ä–∞–º–º–∞—Ç–∏–∫–∞: [–∫—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π]
        """

    async def process_message(self, user_message: str) -> str:
        try:
            if self.provider == "google":
                response = await self.model.generate_content_async(
                    f"{self.system_prompt}\n\nUser: {user_message}"
                )
                return response.text
                
        except Exception as e:
            logger.error(f"AI API error: {str(e)}")
            return f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ." 